<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>CS424, Lab 2, Exercise 2</title>
<style>
    body {
        background-color: #DDDDDD;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        -o-user-select: none;
        user-select: none;
    }
    canvas {
        background-color: white;
        display: block;
    }
    #canvasholder {
        border:2px solid black;
        float: left;
    }
</style>
<script>
"use strict";

var canvas;
var graphics;

function randomColorString() {
    var r = Math.floor(256*Math.random());
    var g = Math.floor(256*Math.random());
    var b = Math.floor(256*Math.random());
    return "rgb(" + r + "," + g + "," + b + ")";
}

function installMouseHandler() {
    var dragging = false;
    var startX, startY;
    var prevX, prevY;
    var colorChoice;

    function doMouseDown(evt) {
        if (dragging || evt.button != 0) return;

        var r = canvas.getBoundingClientRect();
        var x = Math.round(evt.clientX - r.left);
        var y = Math.round(evt.clientY - r.top);

        dragging = true;
        startX = prevX = x;
        startY = prevY = y;

        document.addEventListener("mousemove", doMouseMove, false);
        document.addEventListener("mouseup", doMouseUp, false);

        colorChoice = Number(document.getElementById("colorChoice").value);
    }

    function doMouseMove(evt) {
        if (!dragging) return;

        var r = canvas.getBoundingClientRect();
        var x = Math.round(evt.clientX - r.left);
        var y = Math.round(evt.clientY - r.top);

        if (Math.abs(x - prevX) + Math.abs(y - prevY) < 3) return;

        if (colorChoice == 0) {
            graphics.fillStyle = randomColorString();
        } else if (colorChoice == 1) {
            graphics.fillStyle = "red";
        } else if (colorChoice == 2) {
            graphics.fillStyle = "green";
        } else if (colorChoice == 3) {
            graphics.fillStyle = "blue";
        } else if (colorChoice == 4) {
            graphics.fillStyle = "purple";
        }

        let tool = document.getElementById("toolChoice").value;
        if (tool === "square") {
            graphics.fillRect(x-20, y-20, 40, 40);
            graphics.strokeRect(x-20, y-20, 40, 40);
        } else if (tool === "heptagon") {
            drawRegularPolygon(x, y, 20, 7);
        }

        prevX = x;
        prevY = y;
    }

    function doMouseUp(evt) {
        if (!dragging) return;
        dragging = false;
        document.removeEventListener("mousemove", doMouseMove, false);
        document.removeEventListener("mouseup", doMouseUp, false);
    }

    canvas.addEventListener("mousedown", doMouseDown, false);
}

function addGraphicsContextExtras(graphics) {
    graphics.strokeLine = function(x1,y1,x2,y2) {
        this.beginPath();
        this.moveTo(x1,y1);
        this.lineTo(x2,y2);
        this.stroke();
    };
    graphics.fillCircle = function(x,y,r) {
        this.beginPath();
        this.arc(x,y,r,0,2*Math.PI,false);
        this.fill();
    };
    graphics.strokeCircle = function(x,y,radius) {
        this.beginPath();
        this.arc(x,y,radius,0,2*Math.PI,false);
        this.stroke();
    };
    graphics.fillPoly = function() {
        if (arguments.length < 6) return;
        this.beginPath();
        this.moveTo(arguments[0],arguments[1]);
        for (var i = 2; i+1 < arguments.length; i += 2) {
            this.lineTo(arguments[i],arguments[i+1]);
        }
        this.closePath();
        this.fill();
    };
    graphics.strokePoly = function() {
        if (arguments.length < 4) return;
        this.beginPath();
        this.moveTo(arguments[0],arguments[1]);
        for (var i = 2; i+1 < arguments.length; i += 2) {
            this.lineTo(arguments[i],arguments[i+1]);
        }
        this.closePath();
        this.stroke();
    };
}

function drawRegularPolygon(centerX, centerY, radius, sides) {
    let angle = (2 * Math.PI) / sides;
    graphics.beginPath();
    for (let i = 0; i <= sides; i++) {
        let x = centerX + radius * Math.cos(i * angle);
        let y = centerY + radius * Math.sin(i * angle);
        if (i === 0) {
            graphics.moveTo(x, y);
        } else {
            graphics.lineTo(x, y);
        }
    }
    graphics.closePath();
    graphics.fill();
    graphics.stroke();
}

function init() {
    try {
        canvas = document.getElementById("canvas");
        graphics = canvas.getContext("2d");
    } catch(e) {
        document.getElementById("canvasholder").innerHTML =
            "<p>Canvas graphics is not supported.<br>An error occurred while initializing graphics.</p>";
        return;
    }
    addGraphicsContextExtras(graphics);
    installMouseHandler();

    // Set initial background
    graphics.fillStyle = "white";
    graphics.fillRect(0, 0, canvas.width, canvas.height);

    // Clear button logic
    document.getElementById("clearButton").onclick = function() {
        graphics.fillStyle = "white";
        graphics.fillRect(0, 0, canvas.width, canvas.height);
    };
}
</script>
</head>
<body onload="init()">

<h2>Lab 2, Exercise 2: Mousing</h2>

<p><b>Color:</b>
    <select id="colorChoice">
        <option value="0" selected>Random</option>
        <option value="1">Red</option>
        <option value="2">Green</option>
        <option value="3">Blue</option>
        <option value="4">Purple</option>
    </select>
</p>

<p><b>Tool:</b>
    <select id="toolChoice">
        <option value="square" selected>Square</option>
        <option value="heptagon">Heptagon</option>
    </select>
</p>

<p>
    <button id="clearButton">Clear</button>
</p>

<div id="canvasholder">
    <canvas id="canvas" width="800" height="600">
        Canvas not supported.
    </canvas>
</div>

</body>
</html>